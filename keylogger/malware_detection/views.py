from rest_framework.views import APIView
from rest_framework.response import Response as R
from rest_framework.status import HTTP_400_BAD_REQUEST,HTTP_200_OK
from rest_framework.permissions import IsAuthenticated
from malware_detection.models import MalwareFiles,KeyloggerFiles
from random import randint
from django.conf import settings
from django.http import HttpResponse
from malware_detection.utils import analyze_metrics,checkFile,APK_Analyser
import warnings
warnings.simplefilter("ignore", UserWarning)

def index(request):
    return HttpResponse("The api is working fine.")

class MalwareDetectionView(APIView):
    permission_classes = [IsAuthenticated,]
    def post(self,request,format=None):
        file = request.data.get("file")
        data = None
        if not file:
            return R({"error":"Please select a file"},HTTP_400_BAD_REQUEST)
        

        malware_file = MalwareFiles.objects.create(file=file,user=request.user)
        path = rf"{str(settings.BASE_DIR) + malware_file.file.url}"
        if not str(file).endswith(".apk"):
            metric = analyze_metrics(path=path)
            result = checkFile(file_path=path,base_directory=settings.BASE_DIR)
            metric.update(result)
            status = metric.pop('status')
        else:
            analyzer = APK_Analyser()
            status = analyzer.identify(path,analyzer.model_path)

        if status==1:
            malware_file.is_malware = True
            malware_file.save()
        return R({'status': status},HTTP_200_OK)
        
class KeyloggerDetectionView(APIView):
    permission_classes = [IsAuthenticated,]
    def post(self,request,format=None):
        file = request.data.get("file")
        data = None
        status = 0
        permissions_matched = 0
        internet_present = False

        if not file:
            return R({"error":"Please select a file"},HTTP_400_BAD_REQUEST)
        
        keylogger_file = KeyloggerFiles.objects.create(file=file,user=request.user)
        path = rf"{str(settings.BASE_DIR) + keylogger_file.file.url}"

        if not str(file).endswith(".apk"):
            return R({"error":"Please select an apk file"},HTTP_400_BAD_REQUEST)
        else:
            keylogger_permission_columns =[
                "BIND_ACCESSIBILITY_SERVICE",
                "BIND_INPUT_METHOD",
                "INTERNET",
                "READ_EXTERNAL_STORAGE",
                "WRITE_EXTERNAL_STORAGE",
                "PACKAGE_USAGE_STATS"
            ]


            analyzer = APK_Analyser()
            data = analyzer.identify(path,analyzer.model_path)[1]
            print(data['permissions'])

            for keylogger_permission in keylogger_permission_columns:
                permission_name = f"android.permission.{keylogger_permission}"
                print(permission_name)
                if permission_name in data['permissions']:
                    permissions_matched+=1
                    if keylogger_permission == "INTERNET":
                        internet_present=True

            if permissions_matched >= 3 and internet_present:
                status = 1


        return R({'status':status},HTTP_200_OK)
