from rest_framework.views import APIView
from rest_framework.response import Response as R
from rest_framework.status import HTTP_400_BAD_REQUEST,HTTP_200_OK
from rest_framework.permissions import IsAuthenticated
from malware_detection.models import MalwareFiles,KeyloggerFiles
from random import randint
from django.conf import settings
from django.http import HttpResponse
from malware_detection.utils import analyze_metrics,checkFile,APK_Analyser
import warnings
warnings.simplefilter("ignore", UserWarning)

def index(request):
    return HttpResponse("The api is working fine.")

class MalwareDetectionView(APIView):
    permission_classes = [IsAuthenticated,]
    def post(self,request,format=None):
        file = request.data.get("file")
        if not file:
            return R({"error":"Please select a file"},HTTP_400_BAD_REQUEST)
        

        malware_file = MalwareFiles.objects.create(file=file,user=request.user)
        path = rf"{str(settings.BASE_DIR) + malware_file.file.url}"
        if not str(file).endswith(".apk"):
            metric = analyze_metrics(path=path)
            result = checkFile(file_path=path,base_directory=settings.BASE_DIR)
            metric.update(result)
            status = metric.pop('status')
        else:
            analyzer = APK_Analyser()
            status = analyzer.identify(path,analyzer.model_path)[0]

        if status==1:
            malware_file.is_malware = True
            malware_file.save()
        return R({'status': status},HTTP_200_OK)
        
class KeyloggerDetectionView(APIView):
    permission_classes = [IsAuthenticated,]
    def post(self,request,format=None):
        file = request.data.get("file")
        if not file:
            return R({"error":"Please select a file"},HTTP_400_BAD_REQUEST)
        

        malware_file = KeyloggerFiles.objects.create(file=file,user=request.user)
        # path = rf"{str(settings.BASE_DIR) + malware_file.file.url}"

        return R({"status":randint(0,1)},HTTP_200_OK)
